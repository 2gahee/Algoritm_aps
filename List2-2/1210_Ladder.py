# 1. 시작은 99행에서 시작
# 2. 출발방향은 위 방향
# 3. 위 방향으로 가고 있을 경우
#    3-1 좌 우에 길이 있으면 그 길로 이동
#    3-2 좌 우에 길이 없으면 진행방향 그대로 이동
# 4. 좌, 우로 가고 있을 경우
#    4-1 위로 가는 길이 있으면 이동
#    4-2 위로 가는 길이 없으면 진행방향으로 계속 이동
# 5. 0행에 도착하면 해당위치의 열 번호가 정답
###################################################
# import sys
#
# sys.stdin = open('ladder1_input.txt', 'r')
#

# 사다리 목적지에 도착할 수 있는 출발지를 반환하는 함수
def solve(ladder):
    # 1. 시작은 99행에서 시작, 열은 값이 2인 요소의 인덱스
    # 한 칸 한 칸 움직이려면....현재위치를 저장하는 변수가 필요합니다.
    r = 99
    c = 0
    # 시작점 찾기
    for i in range(100):
        if ladder[99][i] == 2:
            c = i
            break

    # 현재 움직이는 방향을 저장하는 변수
    # 0: 위쪽,  1: 왼쪽,  2: 오른쪽
    d = 0
    dr = [-1, 0, 0]
    dc = [0, -1, 1]
    # 한 칸씩 움직이기
    # r,c 에서
    # d 방향으로 움직일 때,
    # 움직이는 방향 그대로 한칸 더 이동하려면?
    # r += dr[d]
    # c += dc[d]
    # 몇 칸 움직어야 하나요? 꼭대기에 도착할 때 까지 이동 >> while
    while r > 0:
        r += dr[d]
        c += dc[d]
        # 움직였으니까...방향을 바꾸는 길이 있는지 확인
        # 현재 움직이고 있는 방향에 따라서 확인할 위치가 다릅니다.
        # 위로 움직이고 있었다면 >>> 좌우를 살펴봐야 하고
        # 좌,우로 움직이고 있었다면 >>> 위를 살펴봐야 합니다.
        if d == 0:  # 위로 움직이고 있다.
            # 좌우를 확인   좌 : c-1  우 : c+1
            if c-1 >= 0 and ladder[r][c-1]:
                d = 1
            elif c+1 < 100 and ladder[r][c+1]:
                d = 2
        else:   # 좌, 우로 움직이고 있다.
            if r-1 >= 0 and ladder[r-1][c]:
                d = 0
    return c


for _ in range(10):
    tc = input()
    ladder = [list(map(int, input().split())) for _ in range(100)]
    result = solve(ladder)
    print(f'#{tc} {result}')